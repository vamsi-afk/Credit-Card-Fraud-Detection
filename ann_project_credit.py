# -*- coding: utf-8 -*-
"""ann_project_credit

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RsxhTXC75bc27JWT3-NBJxkUQ67asKXI
"""

import tensorflow as tf

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

dataset = pd.read_csv('modfied_card.csv')

X = dataset.iloc[:,:-1].values
y = dataset.iloc[:,-1].values

X = X.astype('float64')

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.22)

from sklearn.preprocessing import LabelEncoder
encoder=  LabelEncoder()
y_train = encoder.fit_transform(y_train)
y_test = encoder.transform(y_test)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train1  = scaler.fit_transform(X_train)
X_test1 = scaler.transform(X_test)

ann = tf.keras.models.Sequential()

ann.add(tf.keras.layers.Dense(units = 100,activation='relu'))

tf.keras.layers.Dropout(0.2)

ann.add(tf.keras.layers.Dense(units = 100,activation='relu'))

ann.add(tf.keras.layers.Dense(units = 100,activation='relu'))

ann.add(tf.keras.layers.Dense(units = 100,activation='relu'))

ann.add(tf.keras.layers.Dense(units = 1 , activation = 'sigmoid'))

ann.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

print(y_test)

print(y_train)



dataset1 = pd.read_csv('datazz.csv')

X1 = dataset1.iloc[:,:-1].values
y1 = dataset1.iloc[:,-1].values

prediction =np.round(ann.predict(X1))

print(prediction)



y1 = encoder.transform(y1)

from sklearn.metrics import accuracy_score
lol = accuracy_score(y1, prediction.round())
print(lol)

lol = pd.read_csv('zzz.csv')
X2 = lol.iloc[:,:].values
X21 = scaler.transform(X2)

y_lol = np.round(ann.predict(X21))

hmm = pd.read_csv('rs.csv')
z = hmm.iloc[:,-1].values

print(z)

from sklearn.metrics import accuracy_score
lol = accuracy_score(z, y_lol)
print(lol)

zz = pd.read_csv('abc.csv')
ya = zz.iloc[:,-1].values
ya = encoder.transform(ya)

print(accuracy_score(ya,y_lol))

!pip install CatBoost

from xgboost import XGBClassifier

cfier = XGBClassifier()
cfier.fit(X_train1,y_train)

y_1 =(cfier.predict(X21))

print(y_1)

print(accuracy_score(ya,y_1))

